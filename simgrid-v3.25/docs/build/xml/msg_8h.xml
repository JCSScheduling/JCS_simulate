<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="msg_8h" kind="file" language="C++">
    <compoundname>msg.h</compoundname>
    <includes refid="actor_8h" local="no">simgrid/actor.h</includes>
    <includes refid="barrier_8h" local="no">simgrid/barrier.h</includes>
    <includes refid="engine_8h" local="no">simgrid/engine.h</includes>
    <includes refid="forward_8h" local="no">simgrid/forward.h</includes>
    <includes refid="host_8h" local="no">simgrid/host.h</includes>
    <includes local="no">simgrid/instr.h</includes>
    <includes refid="mailbox_8h" local="no">simgrid/mailbox.h</includes>
    <includes refid="mutex_8h" local="no">simgrid/mutex.h</includes>
    <includes local="no">simgrid/plugins/live_migration.h</includes>
    <includes refid="semaphore_8h" local="no">simgrid/semaphore.h</includes>
    <includes local="no">simgrid/storage.h</includes>
    <includes local="no">simgrid/version.h</includes>
    <includes refid="vm_8h" local="no">simgrid/vm.h</includes>
    <includes refid="zone_8h" local="no">simgrid/zone.h</includes>
    <includes local="no">xbt.h</includes>
    <includes local="no">map</includes>
    <includes local="no">simgrid/simix.h</includes>
    <includedby refid="msg__private_8hpp" local="yes">msg_private.hpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>simgrid/mutex.h</label>
        <link refid="mutex_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>xbt/dict.h</label>
      </node>
      <node id="17">
        <label>simgrid/version.h</label>
      </node>
      <node id="5">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="22">
        <label>simgrid/simix.h</label>
      </node>
      <node id="7">
        <label>simgrid/barrier.h</label>
        <link refid="barrier_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>xbt/base.h</label>
      </node>
      <node id="19">
        <label>simgrid/zone.h</label>
        <link refid="zone_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>xbt.h</label>
      </node>
      <node id="14">
        <label>simgrid/plugins/live_migration.h</label>
      </node>
      <node id="1">
        <label>msg.h</label>
        <link refid="msg_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>map</label>
      </node>
      <node id="12">
        <label>simgrid/mailbox.h</label>
        <link refid="mailbox_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>simgrid/forward.h</label>
        <link refid="forward_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>simgrid/instr.h</label>
      </node>
      <node id="15">
        <label>simgrid/semaphore.h</label>
        <link refid="semaphore_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>simgrid/engine.h</label>
        <link refid="engine_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>simgrid/host.h</label>
        <link refid="host_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>xbt/dynar.h</label>
      </node>
      <node id="2">
        <label>simgrid/actor.h</label>
        <link refid="actor_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>simgrid/vm.h</label>
        <link refid="vm_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>simgrid/storage.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>msg.h</label>
        <link refid="msg_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>msg_private.hpp</label>
        <link refid="msg__private_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesimgrid">simgrid</innernamespace>
    <innernamespace refid="namespacesimgrid_1_1msg">simgrid::msg</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="msg_8h_1a3acffbd305ee72dcd4593c0d8af64a4f" prot="public" static="no">
        <name>MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &lt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="26" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="msg_8h_1afa99ec4acc4ecb2dc3c2d05da15d0e3f" prot="public" static="no">
        <name>MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &gt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="29" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="msg_8h_1a13f8ac858abd957f5cb2e9a54ad98d76" prot="public" static="no">
        <name>MSG_TASK_UNINITIALIZED</name>
        <initializer>NULL</initializer>
        <briefdescription>
<para>Default value for an uninitialized msg_task_t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="264" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="msg_8h_1ab394a1043a25ec62f498c097d805f0a1" prot="public" static="no">
        <name>MSG_init</name>
        <param><defname>argc</defname></param>
        <param><defname>argv</defname></param>
        <briefdescription>
<para>Initialize the MSG internal data. </para>
        </briefdescription>
        <detaileddescription>
<para>It also checks that the link-time and compile-time versions of SimGrid do match, so you should use this version instead of the MSG_init_nocheck function that does the same initializations, but without this check.</para>
<para>We allow linking against compiled versions that differ in the patch level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="287" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="msg_8h_1a1630728061a6e1c6fa056a3fb96fb20e" prot="public" static="no">
        <name>MSG_task_recv</name>
        <param><defname>t</defname></param>
        <param><defname>a</defname></param>
        <initializer>MSG_task_receive((t), (a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="379" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="msg_8h_1a46d2ecdd760c2eb0521a17b39a922dcf" prot="public" static="no">
        <name>MSG_task_recv_bounded</name>
        <param><defname>t</defname></param>
        <param><defname>a</defname></param>
        <param><defname>r</defname></param>
        <initializer>MSG_task_receive_bounded((t), (a), (r))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="384" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425" prot="public" static="no" strong="no">
        <type></type>
        <name>msg_error_t</name>
        <enumvalue id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425a7db209a18c6374183567534787dccc1b" prot="public">
          <name>MSG_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Everything is right. Keep on going this way ! </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425a2f90300a07b9b18285e1897b1fabfd06" prot="public">
          <name>MSG_TIMEOUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>nothing good happened before the timer you provided elapsed </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425a373b92dc6a498dea6ab408fb1670386f" prot="public">
          <name>MSG_TRANSFER_FAILURE</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>There has been a problem during you task transfer. Either the network is down or the remote host has been shutdown. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425a69965b44e0393c3ba81482bb975c55e5" prot="public">
          <name>MSG_HOST_FAILURE</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>System shutdown. The host on which you are running has just been rebooted. Free your datastructures and return now ! </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="msg_8h_1af79b56c0bd3b78b539b0cb4c12e56425a115b6882d73de65d775aa8c7f1abaf70" prot="public">
          <name>MSG_TASK_CANCELED</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Canceled task. This task has been canceled by somebody! </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return code of most MSG functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="54" column="1" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="54" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="msg_8h_1adebf267462ca1c7ae8b792684381588e" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">simgrid::msg::Comm</ref></type>
        <definition>typedef simgrid::msg::Comm sg_msg_Comm</definition>
        <argsstring></argsstring>
        <name>sg_msg_Comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="41" column="28" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a226973d2dd2b73956f8a517b6225d15d" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">simgrid::msg::Task</ref></type>
        <definition>typedef simgrid::msg::Task sg_msg_Task</definition>
        <argsstring></argsstring>
        <name>sg_msg_Task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="42" column="28" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1ac56848dede80b34aa11dbdaac1f14156" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">sg_netzone_t</ref></type>
        <definition>typedef sg_netzone_t msg_netzone_t</definition>
        <argsstring></argsstring>
        <name>msg_netzone_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="67" column="22" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1ad2f0a5998990542672a3bcc60de270bf" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
        <definition>typedef sg_host_t msg_host_t</definition>
        <argsstring></argsstring>
        <name>msg_host_t</name>
        <briefdescription>
<para>Host datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>location</emphasis> (or <emphasis>host</emphasis>) is any possible place where a process may run. Thus it is represented as a <emphasis>physical resource with computing capabilities</emphasis>, some <emphasis>mailboxes</emphasis> to enable running process to communicate with remote ones, and some <emphasis>private data</emphasis> that can be only accessed by local process. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="84" column="19" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a00f2f629f97f6fac1303810d5407b6de" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">sg_vm_t</ref></type>
        <definition>typedef sg_vm_t msg_vm_t</definition>
        <argsstring></argsstring>
        <name>msg_vm_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="141" column="17" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a432f12d6de368aad9bc05b9e4025711e" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">sg_storage_t</ref></type>
        <definition>typedef sg_storage_t msg_storage_t</definition>
        <argsstring></argsstring>
        <name>msg_storage_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="163" column="22" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a902ee81d6de4fd65e53ac3971acef71b" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">sg_actor_t</ref></type>
        <definition>typedef sg_actor_t msg_process_t</definition>
        <argsstring></argsstring>
        <name>msg_process_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Processes are independent agents that can do stuff on their own. They are in charge of executing your code interacting with the simulated world. A process may be defined as a <emphasis>code</emphasis> with some <emphasis>private data</emphasis>. Processes must be located on <emphasis>hosts</emphasis> (msg_host_t), and they exchange data by sending tasks (msg_task_t) that are similar to envelops containing data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="186" column="20" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1afe46d6adcd9eeea2d222c7e1c4d940c5" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">sg_msg_Comm</ref> *</type>
        <definition>typedef sg_msg_Comm* msg_comm_t</definition>
        <argsstring></argsstring>
        <name>msg_comm_t</name>
        <briefdescription>
<para>Object representing an ongoing communication between processes. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>* Such beast is usually obtained by using :cpp:func:`MSG_task_isend`, :cpp:func:`MSG_task_irecv` or friends.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="247" column="21" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a79e53bc17e5153fa71308c0ae51bd332" prot="public" static="no">
        <type>const <ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">sg_msg_Comm</ref> *</type>
        <definition>typedef const sg_msg_Comm* const_msg_comm_t</definition>
        <argsstring></argsstring>
        <name>const_msg_comm_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="248" column="27" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a0ab8ff23d09e555bc18d872ace455090" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">sg_msg_Task</ref> *</type>
        <definition>typedef sg_msg_Task* msg_task_t</definition>
        <argsstring></argsstring>
        <name>msg_task_t</name>
        <briefdescription>
<para>Task datatype. </para>
        </briefdescription>
        <detaileddescription>
<para>Since most scheduling algorithms rely on a concept of task that can be either <emphasis>computed</emphasis> locally or <emphasis>transferred</emphasis> on another processor, it seems to be the right level of abstraction for our purposes. A <emphasis>task</emphasis> may then be defined by a <emphasis>computing amount</emphasis>, a <emphasis>message size</emphasis> and some <emphasis>private data</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="257" column="21" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1ab38c5dc64a3727e82eea4c7c563472c9" prot="public" static="no">
        <type>const <ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">sg_msg_Task</ref> *</type>
        <definition>typedef const sg_msg_Task* const_msg_task_t</definition>
        <argsstring></argsstring>
        <name>const_msg_task_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="258" column="27" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1ae34c5b92b5060e4a18788e8df34d8204" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">sg_sem_t</ref></type>
        <definition>typedef sg_sem_t msg_sem_t</definition>
        <argsstring></argsstring>
        <name>msg_sem_t</name>
        <briefdescription>
<para>Opaque type representing a semaphore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="430" column="18" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="msg_8h_1a151a39dd7bfb41d52b9a23bf1e32e782" prot="public" static="no">
        <type><ref refid="classsimgrid_1_1s4u_1_1_barrier" kindref="compound">sg_bar_t</ref></type>
        <definition>typedef sg_bar_t msg_bar_t</definition>
        <argsstring></argsstring>
        <name>msg_bar_t</name>
        <briefdescription>
<para>Opaque type representing a barrier identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="440" column="18" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="msg_8h_1a56f1ac4baae9854f7ed34381767c4377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">msg_netzone_t</ref></type>
        <definition>msg_netzone_t MSG_zone_get_root</definition>
        <argsstring>()</argsstring>
        <name>MSG_zone_get_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="69" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="215" bodyend="218" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="69" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5c1a5d58544a81e53da9e42137672175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_zone_get_name</definition>
        <argsstring>(const_sg_netzone_t zone)</argsstring>
        <name>MSG_zone_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">const_sg_netzone_t</ref></type>
          <declname>zone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="70" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="219" bodyend="222" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0f5f3ef8f575b5b3643caaf03836cd49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">msg_netzone_t</ref></type>
        <definition>msg_netzone_t MSG_zone_get_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>MSG_zone_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="71" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="223" bodyend="226" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="71" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a19018fe16af1595a753a4f7c97009401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_zone_get_sons</definition>
        <argsstring>(const_sg_netzone_t zone, xbt_dict_t whereto)</argsstring>
        <name>MSG_zone_get_sons</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">const_sg_netzone_t</ref></type>
          <declname>zone</declname>
        </param>
        <param>
          <type>xbt_dict_t</type>
          <declname>whereto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="72" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="227" bodyend="230" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="72" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af6e41b453826a8060653e2e334983ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_zone_get_property_value</definition>
        <argsstring>(const_sg_netzone_t zone, const char *name)</argsstring>
        <name>MSG_zone_get_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">const_sg_netzone_t</ref></type>
          <declname>zone</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="73" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="231" bodyend="234" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1acf593f416907ff4c5ac246b28bc9b63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_zone_set_property_value</definition>
        <argsstring>(msg_netzone_t zone, const char *name, const char *value)</argsstring>
        <name>MSG_zone_set_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">msg_netzone_t</ref></type>
          <declname>zone</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="74" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="235" bodyend="238" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7d58a121666846625e4eb05192862db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_zone_get_hosts</definition>
        <argsstring>(const_sg_netzone_t zone, xbt_dynar_t whereto)</argsstring>
        <name>MSG_zone_get_hosts</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_net_zone" kindref="compound">const_sg_netzone_t</ref></type>
          <declname>zone</declname>
        </param>
        <param>
          <type>xbt_dynar_t</type>
          <declname>whereto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="75" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="239" bodyend="242" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="75" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a787bd450873467d990841fcae985a565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
        <definition>sg_host_t MSG_get_host_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>MSG_get_host_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Finds a msg_host_t using its name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="87" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="299" bodyend="302" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="87" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a435b1bbe804a90e1c3c1c5553f8e2f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
        <definition>sg_host_t MSG_host_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>MSG_host_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Finds a msg_host_t using its name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="89" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="303" bodyend="306" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="89" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a3c639dc525f933f64659d24d29ec11ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MSG_get_host_number</definition>
        <argsstring>()</argsstring>
        <name>MSG_get_host_number</name>
        <briefdescription>
<para>Returns the amount of host found in the platform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="92" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="295" bodyend="298" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="92" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1acbb4791aca9c06ee7a849a1738c79dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dynar_t</type>
        <definition>xbt_dynar_t MSG_hosts_as_dynar</definition>
        <argsstring>()</argsstring>
        <name>MSG_hosts_as_dynar</name>
        <briefdescription>
<para>Returns a dynar with all existing hosts. </para>
        </briefdescription>
        <detaileddescription>
<para>The host order in the returned array is generally different from the host creation/declaration order in the XML platform (we use a hash table internally). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="98" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="291" bodyend="294" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="98" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a108d8f6048602bfe7c65f7eeecd1ff4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_host_get_name</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Returns the name of this host. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="101" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="307" bodyend="310" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="101" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0c97592e7c0eb52e96c31d0108c659b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* MSG_host_get_data</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Returns the user data of this host. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="103" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="311" bodyend="314" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="103" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7f710384b1fec941fff95d8669b4b960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_set_data</definition>
        <argsstring>(sg_host_t host, void *data)</argsstring>
        <name>MSG_host_set_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets the user data of this host. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="105" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="315" bodyend="318" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="105" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4be15dec8842f55f4c4a17c4e8f186e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dict_t</type>
        <definition>xbt_dict_t MSG_host_get_mounted_storage_list</definition>
        <argsstring>(sg_host_t host)</argsstring>
        <name>MSG_host_get_mounted_storage_list</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="106" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="319" bodyend="322" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a472dcda884ec6622f6c4544287aa6f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dynar_t</type>
        <definition>xbt_dynar_t MSG_host_get_attached_storage_lists</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_attached_storage_lists</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="107" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="323" bodyend="326" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="107" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa08bc17df59a631996f621c20439d1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_host_get_speed</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_speed</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="108" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="327" bodyend="330" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="108" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4d0eb88041bd747a26be2113bcbbbfec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_host_get_power_peak_at</definition>
        <argsstring>(const_sg_host_t host, int pstate_index)</argsstring>
        <name>MSG_host_get_power_peak_at</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pstate_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="109" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="331" bodyend="334" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="109" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a27c996803fc1384aa3600901095939b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_host_get_core_number</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_core_number</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="110" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="335" bodyend="338" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a8fab674707d586c00ce70f6253a8dcbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_host_get_nb_pstates</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_nb_pstates</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="111" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="339" bodyend="342" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6e19739fd31db3b357428c5a4986d267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_host_get_pstate</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_pstate</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="112" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="343" bodyend="346" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="112" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7df9fd68693e6596fe441c2ba56a0e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_set_pstate</definition>
        <argsstring>(sg_host_t host, int pstate)</argsstring>
        <name>MSG_host_set_pstate</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="113" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="347" bodyend="350" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="113" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ad30818dc7aba2f83aa08ae42dc4c3f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_on</definition>
        <argsstring>(sg_host_t h)</argsstring>
        <name>MSG_host_on</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Start the host if it is off. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* See also :cpp:func:`MSG_host_is_on()` to test the current state of the host, and :ref:`plugin_host_energy`
* for more info on DVFS.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="121" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="351" bodyend="354" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="121" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ac78db23fef5e4a773f0116940db3fa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_off</definition>
        <argsstring>(sg_host_t h)</argsstring>
        <name>MSG_host_off</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Stop the host if it is on. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* See also :cpp:func:`MSG_host_is_on()` to test the current state of the host, and :ref:`plugin_host_energy`
* for more info on DVFS.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="129" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="355" bodyend="358" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="129" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a8a0bf1ed50d24d07ff64dc339a498297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_host_is_on</definition>
        <argsstring>(const_sg_host_t h)</argsstring>
        <name>MSG_host_is_on</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="130" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="359" bodyend="362" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a323cb35d5e6fe02de2de1e8882d539db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dict_t</type>
        <definition>xbt_dict_t MSG_host_get_properties</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_properties</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="131" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="363" bodyend="366" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aca5a1a61d183403f577ccce4c4b97b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_host_get_property_value</definition>
        <argsstring>(const_sg_host_t host, const char *name)</argsstring>
        <name>MSG_host_get_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="132" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="367" bodyend="370" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a9a65d27d7ffe21ef1543489286ce8838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_set_property_value</definition>
        <argsstring>(sg_host_t host, const char *name, const char *value)</argsstring>
        <name>MSG_host_set_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="133" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="371" bodyend="374" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="133" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0379d35821455c1307fc64d1d816b4fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_host_get_process_list</definition>
        <argsstring>(const_sg_host_t host, xbt_dynar_t whereto)</argsstring>
        <name>MSG_host_get_process_list</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>xbt_dynar_t</type>
          <declname>whereto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="134" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="375" bodyend="378" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="134" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af4dc36862c4345f494e56a07cc744e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
        <definition>sg_host_t MSG_host_self</definition>
        <argsstring>()</argsstring>
        <name>MSG_host_self</name>
        <briefdescription>
<para>Return the location on which the current process is executed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="137" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="379" bodyend="382" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="137" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a45e9b5e83b67bdb4180de88de0032dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_host_get_load</definition>
        <argsstring>(const_sg_host_t host)</argsstring>
        <name>MSG_host_get_load</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">const_sg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="138" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="384" bodyend="387" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="138" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a93200f4a4e8eadcd8f342f5278ddc403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
        <definition>msg_vm_t MSG_vm_create_core</definition>
        <argsstring>(msg_host_t pm, const char *name)</argsstring>
        <name>MSG_vm_create_core</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="143" column="11" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="389" bodyend="392" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="143" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ac340893ea78be6fad23f3610c31e92f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
        <definition>msg_vm_t MSG_vm_create_multicore</definition>
        <argsstring>(msg_host_t pm, const char *name, int coreAmount)</argsstring>
        <name>MSG_vm_create_multicore</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coreAmount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="144" column="11" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="393" bodyend="396" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="144" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa5938e8592cc4b304ecc1fcf43dfcb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_vm_is_created</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_is_created</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="146" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="397" bodyend="400" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6ba8320c7a90ed67d3c8e2079460b8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_vm_is_running</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_is_running</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="147" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="401" bodyend="404" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ac7919295b7c197a43717e367f9c115c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_vm_is_suspended</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_is_suspended</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="148" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="405" bodyend="408" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1adbad483bdd059b382d0915a841d1bb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_vm_get_name</definition>
        <argsstring>(const_sg_vm_t vm)</argsstring>
        <name>MSG_vm_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">const_sg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="150" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="409" bodyend="412" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a324b96059aa661baacc43dd6cec667df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_set_ramsize</definition>
        <argsstring>(msg_vm_t vm, size_t size)</argsstring>
        <name>MSG_vm_set_ramsize</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="151" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="413" bodyend="416" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="151" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7ed7a6eb9e5c9b7e3898120e384ba6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MSG_vm_get_ramsize</definition>
        <argsstring>(const_sg_vm_t vm)</argsstring>
        <name>MSG_vm_get_ramsize</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">const_sg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="152" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="417" bodyend="420" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="152" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa4c8998f21b363d525831121ca6e2c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
        <definition>msg_host_t MSG_vm_get_pm</definition>
        <argsstring>(const_sg_vm_t vm)</argsstring>
        <name>MSG_vm_get_pm</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">const_sg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="153" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="421" bodyend="424" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7a3d2260745ce490568f7196b1e94c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_set_bound</definition>
        <argsstring>(msg_vm_t vm, double bound)</argsstring>
        <name>MSG_vm_set_bound</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="154" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="425" bodyend="428" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="154" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1afd6d6e92e69f61c5b110a1277019b77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_start</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_start</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="156" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="429" bodyend="432" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="156" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a32243e8be24c253c0367c81d0289e057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_suspend</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_suspend</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="157" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="433" bodyend="436" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="157" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a9815e54a5e6cdf849d4847803d377e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_resume</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_resume</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="158" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="437" bodyend="440" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="158" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a1a40d2652506f4576408e35346cd3cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_shutdown</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_shutdown</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="159" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="441" bodyend="444" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="159" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ae493c978235ba8efeee6d8b5a5286e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_vm_destroy</definition>
        <argsstring>(msg_vm_t vm)</argsstring>
        <name>MSG_vm_destroy</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_virtual_machine" kindref="compound">msg_vm_t</ref></type>
          <declname>vm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="160" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="445" bodyend="448" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="160" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af167e9af881a810a42dfc6589081eb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_storage_get_name</definition>
        <argsstring>(const_sg_storage_t storage)</argsstring>
        <name>MSG_storage_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">const_sg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="165" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="245" bodyend="248" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="165" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a546b28d8dcd4f9b9f9206fa49c97fb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">msg_storage_t</ref></type>
        <definition>msg_storage_t MSG_storage_get_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>MSG_storage_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="166" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="249" bodyend="252" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="166" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5f24aefc68717d7da2c60f7fb825e050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dict_t</type>
        <definition>xbt_dict_t MSG_storage_get_properties</definition>
        <argsstring>(const_sg_storage_t storage)</argsstring>
        <name>MSG_storage_get_properties</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">const_sg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="167" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="253" bodyend="256" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="167" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ac02c9109e9b533d7c4f948e7cb08b90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_storage_set_property_value</definition>
        <argsstring>(msg_storage_t storage, const char *name, const char *value)</argsstring>
        <name>MSG_storage_set_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">msg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="168" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="257" bodyend="260" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="168" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7eb81684d9974048a392d0db7b91a3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_storage_get_property_value</definition>
        <argsstring>(const_sg_storage_t storage, const char *name)</argsstring>
        <name>MSG_storage_get_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">const_sg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="169" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="261" bodyend="264" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a91b759c3657847ed163ff31e95277d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dynar_t</type>
        <definition>xbt_dynar_t MSG_storages_as_dynar</definition>
        <argsstring>()</argsstring>
        <name>MSG_storages_as_dynar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="170" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="265" bodyend="268" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="170" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a88e3e599c32d79055d315290e6be5d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_storage_set_data</definition>
        <argsstring>(msg_storage_t storage, void *data)</argsstring>
        <name>MSG_storage_set_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">msg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="171" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="269" bodyend="272" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="171" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aab84ec1ccd3fde6df665c9c03f5de97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* MSG_storage_get_data</definition>
        <argsstring>(const_sg_storage_t storage)</argsstring>
        <name>MSG_storage_get_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">const_sg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="172" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="273" bodyend="276" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="172" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a242291d20b03b140e59eefe80bb1b8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_storage_get_host</definition>
        <argsstring>(const_sg_storage_t storage)</argsstring>
        <name>MSG_storage_get_host</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">const_sg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="173" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="277" bodyend="280" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6f14b56d024a5f426c431f4b672eb706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sg_size_t</type>
        <definition>sg_size_t MSG_storage_read</definition>
        <argsstring>(msg_storage_t storage, sg_size_t size)</argsstring>
        <name>MSG_storage_read</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">msg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <param>
          <type>sg_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="174" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="281" bodyend="284" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="174" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1abb82c6429fdac7d9d14824516e116b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sg_size_t</type>
        <definition>sg_size_t MSG_storage_write</definition>
        <argsstring>(msg_storage_t storage, sg_size_t size)</argsstring>
        <name>MSG_storage_write</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_storage" kindref="compound">msg_storage_t</ref></type>
          <declname>storage</declname>
        </param>
        <param>
          <type>sg_size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="175" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="285" bodyend="288" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="175" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a715ae04dd69faaf864a9242743ae8cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_process_get_PID</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_PID</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="188" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="50" bodyend="53" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a249eca2041f028b40b54f465c478172d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_process_get_PPID</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_PPID</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="189" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="54" bodyend="57" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a3bf427639fd3783865105a20390e5ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">sg_actor_t</ref></type>
        <definition>sg_actor_t MSG_process_from_PID</definition>
        <argsstring>(int pid)</argsstring>
        <name>MSG_process_from_PID</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
<para>Return a process from its PID (or NULL if not found). </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the PID are unique in the whole simulation, not only on a given host. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="194" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="58" bodyend="61" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a91f5b8df0d690bdf0b5ef434e5a1f012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_process_get_name</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="195" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="62" bodyend="65" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="195" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a67d681c58756de67015335d02166d40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">sg_host_t</ref></type>
        <definition>sg_host_t MSG_process_get_host</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_host</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="196" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="66" bodyend="69" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="196" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ab35963f82379186cc0d2b9705d149308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dict_t</type>
        <definition>xbt_dict_t MSG_process_get_properties</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_properties</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="199" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="70" bodyend="73" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="199" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5595cf1c620cd6cda23eef9d06d8d017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_process_get_property_value</definition>
        <argsstring>(const_sg_actor_t process, const char *name)</argsstring>
        <name>MSG_process_get_property_value</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="200" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="74" bodyend="77" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ae7fdf082ea6069ee2a9e63831f428eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_suspend</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_suspend</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="202" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="78" bodyend="81" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="202" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a1ffbcdc82361db30521106c73dbc87ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_resume</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_resume</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="203" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="82" bodyend="85" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="203" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4fd646e5d31bdecfc5e93405a2c32d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_process_is_suspended</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_is_suspended</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="204" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="86" bodyend="89" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ab507241daeef807037ebe0a3442238f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_restart</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_restart</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="205" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="90" bodyend="93" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="205" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa8489360976ff79e94e3db2254e5b7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_auto_restart_set</definition>
        <argsstring>(msg_process_t process, int auto_restart)</argsstring>
        <name>MSG_process_auto_restart_set</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type>int</type>
          <declname>auto_restart</declname>
        </param>
        <briefdescription>
<para>Sets the &quot;auto-restart&quot; flag of the process. </para>
        </briefdescription>
        <detaileddescription>
<para>If the flag is set, the process will be automatically restarted when its host comes back up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="210" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="94" bodyend="97" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="210" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a890e1e3ea0a9eb518b70ce37a85e1ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_daemonize</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_daemonize</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
<para>Indicates that this process should not prevent the simulation from ending. </para>
        </briefdescription>
        <detaileddescription>
<para>SimGrid simulations run until all non-daemon processes are stopped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="215" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="99" bodyend="102" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="215" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ad945a0e772b1b5a457c85e409c84d4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_migrate</definition>
        <argsstring>(msg_process_t process, msg_host_t host)</argsstring>
        <name>MSG_process_migrate</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Immediately changes the host on which this process runs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="217" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="103" bodyend="106" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="217" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ab102087b2950d05e20c8f6aae270d08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_join</definition>
        <argsstring>(msg_process_t process, double timeout)</argsstring>
        <name>MSG_process_join</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for the completion of a process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>process</parametername>
</parameternamelist>
<parameterdescription>
<para>the process to wait for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>wait until the process is over, or the timeout occurs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="223" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="107" bodyend="110" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="223" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ab7ed321f5bf4776d42e1d91158d67b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_kill</definition>
        <argsstring>(msg_process_t process)</argsstring>
        <name>MSG_process_kill</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
<para>Kills a process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="225" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="111" bodyend="114" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="225" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4d29818dc37aa11bf112c5bfa9e5003b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_killall</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_killall</name>
        <briefdescription>
<para>Kill all running process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="227" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="115" bodyend="118" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="227" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4c9683acaed3ad53baf86a6d174ec638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_set_kill_time</definition>
        <argsstring>(msg_process_t process, double kill_time)</argsstring>
        <name>MSG_process_set_kill_time</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kill_time</declname>
        </param>
        <briefdescription>
<para>Specifies the time at which the process should be automatically killed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="229" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="119" bodyend="122" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="229" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a597b373d3272a8dcff3cc131d60d92f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_yield</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_yield</name>
        <briefdescription>
<para>Yield the current actor; let the other actors execute first. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="231" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="123" bodyend="126" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="231" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ab7c18061b167e38f28886512ea73be6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_process_sleep</definition>
        <argsstring>(double nb_sec)</argsstring>
        <name>MSG_process_sleep</name>
        <param>
          <type>double</type>
          <declname>nb_sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="233" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="128" bodyend="136" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="233" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5182fa348c9c2587b55d0680c8c81348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_process_self</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_self</name>
        <briefdescription>
<para>Return the current process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the currently running msg_process_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="234" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="194" bodyend="197" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="234" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a8513a8fa63ca7b50d2d47890a36fa6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>aid_t</type>
        <definition>aid_t MSG_process_self_PID</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_self_PID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="235" column="8" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="171" bodyend="174" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="235" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a980537ade18de011f2b0adde70910537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>aid_t</type>
        <definition>aid_t MSG_process_self_PPID</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_self_PPID</name>
        <briefdescription>
<para>Return the PPID of the current process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the PID of the parent of the currently running msg_process_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="236" column="8" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="180" bodyend="183" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="236" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0102976c99c1d1c0842a03119a7e33bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_process_self_name</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_self_name</name>
        <briefdescription>
<para>Return the name of the current process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="237" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="186" bodyend="189" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="237" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aca46b1e22b9f80c14843afb27ca36151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_ref</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_ref</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
<para>Take an extra reference on that process to prevent it to be garbage-collected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="238" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="200" bodyend="203" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="238" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a216da6c45117f06322b0e4266300ee3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_unref</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_unref</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
<para>Release a reference on that process so that it can get be garbage-collected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="239" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="205" bodyend="208" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="239" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a35037b57281f860b92ed7704d37de78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_config</definition>
        <argsstring>(const char *key, const char *value)</argsstring>
        <name>MSG_config</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set a configuration variable </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* Do --help on any simgrid binary to see the list of currently existing configuration variables, and see Section
* :ref:`options`.
* </verbatim></para>
<para>Example: MSG_config(&quot;host/model&quot;,&quot;ptask_L07&quot;); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="277" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_global.cpp" bodystart="61" bodyend="65" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="277" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0dbc6fabf0391c4f193b33befeb8a22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_init_nocheck</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>MSG_init_nocheck</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Initialize MSG with less verifications You should use the MSG_init() function instead. Failing to do so may turn into PEBKAC some day. You&apos;ve been warned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="293" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_global.cpp" bodystart="29" bodyend="59" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="293" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a0819b7925b253725a538248ba8d82c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_main</definition>
        <argsstring>()</argsstring>
        <name>MSG_main</name>
        <briefdescription>
<para>Launch the MSG simulation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="295" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="21" bodyend="25" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="295" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a21e94a4e7b26dea140b0c71a2a4f4352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_function_register</definition>
        <argsstring>(const char *name, xbt_main_func_t code)</argsstring>
        <name>MSG_function_register</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>xbt_main_func_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Registers the main function of a process in a global table. </para>
        </briefdescription>
        <detaileddescription>
<para>This table is then used by MSG_launch_application. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference name of the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>the function (must have the same prototype than the main function of any C program: int ..(int argc, char *argv[])) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="303" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="26" bodyend="29" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="303" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a698d00aec4b3d7f8cf90c4d1a4595c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_function_register_default</definition>
        <argsstring>(xbt_main_func_t code)</argsstring>
        <name>MSG_function_register_default</name>
        <param>
          <type>xbt_main_func_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Registers a code function as being the default value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will get used by MSG_launch_application() when there is no registered function of the requested name in.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>the function (must have the same prototype than the main function of any C program: int ..(int argc, char *argv[])) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="312" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="30" bodyend="33" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="312" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ae08e089d52a2928680e0957e7152d79d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_create_environment</definition>
        <argsstring>(const char *file)</argsstring>
        <name>MSG_create_environment</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Creates a new platform, including hosts, links and the routing_table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="314" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="12" bodyend="15" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="314" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a012d470de7974da7262d0020e00117e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_launch_application</definition>
        <argsstring>(const char *file)</argsstring>
        <name>MSG_launch_application</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Creates the application described in the provided file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="316" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="17" bodyend="20" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="316" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a50c90ece7512b845de330bbe9904430f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_get_clock</definition>
        <argsstring>()</argsstring>
        <name>MSG_get_clock</name>
        <briefdescription>
<para>A clock (in second). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="325" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="34" bodyend="37" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="325" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a09b3ca4fc253a9d21e1af4c422682461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int MSG_get_sent_msg</definition>
        <argsstring>()</argsstring>
        <name>MSG_get_sent_msg</name>
        <briefdescription>
<para>Returns the amount of messages sent since the simulation start. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="327" column="20" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_global.cpp" bodystart="73" bodyend="76" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="327" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a943d27b38754b2af9f78e80cc29db306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_process_create</definition>
        <argsstring>(const char *name, xbt_main_func_t code, void *data, msg_host_t host)</argsstring>
        <name>MSG_process_create</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>xbt_main_func_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Creates and runs a new msg_process_t. </para>
        </briefdescription>
        <detaileddescription>
<para>Does exactly the same as MSG_process_create_with_arguments but without providing standard arguments (<emphasis>argc</emphasis>, <emphasis>argv</emphasis>, <emphasis>start_time</emphasis>, <emphasis>kill_time</emphasis>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="330" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="17" bodyend="20" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="330" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a1540ef18107c4d2387a937017dcf97c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_process_create_with_arguments</definition>
        <argsstring>(const char *name, xbt_main_func_t code, void *data, msg_host_t host, int argc, char **argv)</argsstring>
        <name>MSG_process_create_with_arguments</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>xbt_main_func_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Creates and runs a new process. </para>
        </briefdescription>
        <detaileddescription>
<para>A constructor for msg_process_t taking four arguments and returning the corresponding object. The structure (and the corresponding thread) is created, and put in the list of ready process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a name for the object. It is for user-level information and can be nullptr. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>is a function describing the behavior of the process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to any data one may want to attach to the new object. It is for user-level information and can be nullptr. It can be retrieved with the function MSG_process_get_data(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the location where the new process is executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>first argument passed to <emphasis>code</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>second argument passed to <emphasis>code</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="331" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="35" bodyend="39" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="331" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a640b4cc9200796bc211e6d8b794ba922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_process_create_with_environment</definition>
        <argsstring>(const char *name, xbt_main_func_t code, void *data, msg_host_t host, int argc, char **argv, xbt_dict_t properties)</argsstring>
        <name>MSG_process_create_with_environment</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>xbt_main_func_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>xbt_dict_t</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Creates and runs a new msg_process_t. </para>
        </briefdescription>
        <detaileddescription>
<para>A constructor for msg_process_t taking four arguments and returning the corresponding object. The structure (and the corresponding thread) is created, and put in the list of ready process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a name for the object. It is for user-level information and can be nullptr. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>is a function describing the behavior of the process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to any data one may want to attach to the new object. It is for user-level information and can be nullptr. It can be retrieved with the function MSG_process_get_data(). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the location where the new process is executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>first argument passed to <emphasis>code</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>second argument passed to <emphasis>code</emphasis>. WARNING, these strings are freed by the SimGrid kernel when the process exits, so they cannot be static nor shared between several processes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>list a properties defined for this process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>msg_process_t </para>
</simplesect>
<simplesect kind="return"><para>The new corresponding object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="333" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="58" bodyend="85" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="333" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6e65b5251bce857393fe8b2ff61165d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_process_attach</definition>
        <argsstring>(const char *name, void *data, msg_host_t host, xbt_dict_t properties)</argsstring>
        <name>MSG_process_attach</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
          <declname>host</declname>
        </param>
        <param>
          <type>xbt_dict_t</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="337" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="162" bodyend="165" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="337" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aed221d9e0da635966fbadbb25cae58cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_detach</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_detach</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="338" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="167" bodyend="170" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="338" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2c75b91ef5b61cad66a7fa3a72d122d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_set_data_cleanup</definition>
        <argsstring>(void_f_pvoid_t data_cleanup)</argsstring>
        <name>MSG_process_set_data_cleanup</name>
        <param>
          <type>void_f_pvoid_t</type>
          <declname>data_cleanup</declname>
        </param>
        <briefdescription>
<para>Sets a cleanup function to be called to free the userdata of a process when a process is destroyed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>a cleanup function for the userdata of a process, or nullptr to call no function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="340" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="90" bodyend="93" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="340" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa0bba05fe64ae01aab2dff95e58fff7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xbt_dynar_t</type>
        <definition>xbt_dynar_t MSG_processes_as_dynar</definition>
        <argsstring>()</argsstring>
        <name>MSG_processes_as_dynar</name>
        <briefdescription>
<para>returns a list of all currently existing processes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="341" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="96" bodyend="103" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="341" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5b6ebe9b6721d163f682f44667d55167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_process_get_number</definition>
        <argsstring>()</argsstring>
        <name>MSG_process_get_number</name>
        <briefdescription>
<para>Return the current number MSG processes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="342" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="210" bodyend="213" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a48f2f700ae3028b9cf6fa8845e229038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* MSG_process_get_data</definition>
        <argsstring>(const_sg_actor_t process)</argsstring>
        <name>MSG_process_get_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">const_sg_actor_t</ref></type>
          <declname>process</declname>
        </param>
        <briefdescription>
<para>Returns the user data of a process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether <emphasis>process</emphasis> is a valid pointer and returns the user data associated to this process. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="344" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="142" bodyend="148" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="344" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ad1ad359bc57b8a7008435ee29e1da681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_process_set_data</definition>
        <argsstring>(msg_process_t process, void *data)</argsstring>
        <name>MSG_process_set_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
          <declname>process</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets the user data of a process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether <emphasis>process</emphasis> is a valid pointer and sets the user data associated to this process. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="345" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="154" bodyend="160" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="345" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aeb5b26b5415d470ea5ecbd32f28b1400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_process_on_exit</definition>
        <argsstring>(int_f_int_pvoid_t fun, void *data)</argsstring>
        <name>MSG_process_on_exit</name>
        <param>
          <type>int_f_int_pvoid_t</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Add a function to the list of &quot;on_exit&quot; functions for the current process. The on_exit functions are the functions executed when your process is killed. You should use them to free the data used by your process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="347" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_process.cpp" bodystart="109" bodyend="112" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="347" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af0c7d1026ced6f37761a76ef13ea1985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
        <definition>msg_task_t MSG_task_create</definition>
        <argsstring>(const char *name, double flops_amount, double bytes_amount, void *data)</argsstring>
        <name>MSG_task_create</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>flops_amount</declname>
          <defname>flop_amount</defname>
        </param>
        <param>
          <type>double</type>
          <declname>bytes_amount</declname>
          <defname>message_size</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a new task. </para>
        </briefdescription>
        <detaileddescription>
<para>A constructor for msg_task_t taking four arguments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a name for the object. It is for user-level information and can be nullptr. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flop_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>a value of the processing amount (in flop) needed to process this new task. If 0, then it cannot be executed with MSG_task_execute(). This value has to be &gt;=0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_size</parametername>
</parameternamelist>
<parameterdescription>
<para>a value of the amount of data (in bytes) needed to transfer this new task. If 0, then it cannot be transferred with MSG_task_send() and MSG_task_recv(). This value has to be &gt;=0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to any data may want to attach to the new object. It is for user-level information and can be nullptr. It can be retrieved with the function MSG_task_get_data(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new corresponding object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="350" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="214" bodyend="217" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="350" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a54b55568daac3d72dabb06ce9faf68f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
        <definition>msg_task_t MSG_parallel_task_create</definition>
        <argsstring>(const char *name, int host_nb, const msg_host_t *host_list, double *flops_amount, double *bytes_amount, void *data)</argsstring>
        <name>MSG_parallel_task_create</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>host_nb</declname>
        </param>
        <param>
          <type>const <ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref> *</type>
          <declname>host_list</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>flops_amount</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bytes_amount</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Creates a new parallel task. </para>
        </briefdescription>
        <detaileddescription>
<para>A constructor for msg_task_t taking six arguments.</para>
<para><verbatim>* See :cpp:func:`void simgrid::s4u::this_actor::parallel_execute(int, s4u::Host**, double*, double*)` for
* the exact semantic of the parameters.
* </verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a name for the object. It is for user-level information and can be nullptr. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host_nb</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of hosts implied in the parallel task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host_list</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <computeroutput>host_nb</computeroutput> msg_host_t. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flops_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <computeroutput>host_nb</computeroutput> doubles. flops_amount[i] is the total number of operations that have to be performed on host_list[i]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <computeroutput>host_nb*</computeroutput> <computeroutput>host_nb</computeroutput> doubles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to any data may want to attach to the new object. It is for user-level information and can be nullptr. It can be retrieved with the function MSG_task_get_data(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="351" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="238" bodyend="244" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="351" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a719d2cc403b117340117682dc069b563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* MSG_task_get_data</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Return the user data of the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="353" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="247" bodyend="250" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="353" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a5a2984b6a34bb725b52ee31cdece56a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_data</definition>
        <argsstring>(msg_task_t task, void *data)</argsstring>
        <name>MSG_task_set_data</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets the user data of a given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="354" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="253" bodyend="256" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="354" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a450ce59418b95d22d0fd5fcb77ed5cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_actor" kindref="compound">msg_process_t</ref></type>
        <definition>msg_process_t MSG_task_get_sender</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_sender</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the sender of the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="355" column="16" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="259" bodyend="262" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="355" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a9bd2d063a8667c5e7f6e80c3732e0cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_host" kindref="compound">msg_host_t</ref></type>
        <definition>msg_host_t MSG_task_get_source</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_source</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the source (the sender&apos;s host) of the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="356" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="265" bodyend="268" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="356" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af3c1d19bef7e0a2450af529cef6cf5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_task_get_name</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the name of the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="357" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="271" bodyend="274" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="357" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa97b99e0176424e3f0afdf239e2f3f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_name</definition>
        <argsstring>(msg_task_t task, const char *name)</argsstring>
        <name>MSG_task_set_name</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets the name of the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="358" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="277" bodyend="280" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="358" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a32b22934d1c7618a1066054ccb94a60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_cancel</definition>
        <argsstring>(msg_task_t task)</argsstring>
        <name>MSG_task_cancel</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Cancel the given task. </para>
        </briefdescription>
        <detaileddescription>
<para>If it was currently executed or transferred, the working process is stopped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="359" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="676" bodyend="681" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="359" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af6369e840095c428218e494bf8b6dee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_destroy</definition>
        <argsstring>(msg_task_t task)</argsstring>
        <name>MSG_task_destroy</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Destroys the given task. </para>
        </briefdescription>
        <detaileddescription>
<para>You should free user data, if any, <bold>before</bold> calling this destructor.</para>
<para>Only the process that owns the task can destroy it. The owner changes after a successful send. If a task is successfully sent, the receiver becomes the owner and is supposed to destroy it. The sender should not use it anymore. If the task failed to be sent, the sender remains the owner of the task. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="360" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="659" bodyend="670" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="360" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6ebbb75fe9ff779eac6ca57c5ad5bfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_execute</definition>
        <argsstring>(msg_task_t task)</argsstring>
        <name>MSG_task_execute</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Executes a task and waits for its termination. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used for describing the behavior of a process. It takes only one parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to execute on the location on which the process is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MSG_OK if the task was successfully completed, MSG_TASK_CANCELED or MSG_HOST_FAILURE otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="362" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="289" bodyend="292" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="362" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a97bd13baa799b73b12599b3d6f7b849f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_parallel_task_execute</definition>
        <argsstring>(msg_task_t task)</argsstring>
        <name>MSG_parallel_task_execute</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Executes a parallel task and waits for its termination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to execute on the location on which the process is running.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MSG_OK if the task was successfully completed, MSG_TASK_CANCELED or MSG_HOST_FAILURE otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="363" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="301" bodyend="304" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="363" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a45b5ebc2a48f9b4e3490200db4efc632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_parallel_task_execute_with_timeout</definition>
        <argsstring>(msg_task_t task, double timeout)</argsstring>
        <name>MSG_parallel_task_execute_with_timeout</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="364" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="306" bodyend="310" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="364" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a22cf2562fbb9cad8c5860914c0d8d6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_priority</definition>
        <argsstring>(msg_task_t task, double priority)</argsstring>
        <name>MSG_task_set_priority</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>double</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Changes the priority of a computation task. </para>
        </briefdescription>
        <detaileddescription>
<para>This priority doesn&apos;t affect the transfer rate. A priority of 2 will make a task receive two times more cpu power than regular tasks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="365" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="762" bodyend="765" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="365" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a87b297371654cd28eace12a22e52c44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_bound</definition>
        <argsstring>(msg_task_t task, double bound)</argsstring>
        <name>MSG_task_set_bound</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bound</declname>
        </param>
        <briefdescription>
<para>Changes the maximum CPU utilization of a computation task (in flops/s). </para>
        </briefdescription>
        <detaileddescription>
<para>For VMs, there is a pitfall. Please see MSG_vm_set_bound(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="366" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="771" bodyend="776" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="366" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a9eda5e1015cb89fcae6284352456efb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_flops_amount</definition>
        <argsstring>(msg_task_t task, double flops_amount)</argsstring>
        <name>MSG_task_set_flops_amount</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>double</type>
          <declname>flops_amount</declname>
        </param>
        <briefdescription>
<para>set the computation amount needed to process the given task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the computation is ongoing (already started and not finished), it is not modified by this call. Moreover, after its completion, the ongoing execution with set the flops_amount to zero, overriding any value set during the execution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="368" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="725" bodyend="728" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="368" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a843715b41b0565bd25861dfcee43b8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_task_get_flops_amount</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_flops_amount</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the amount of flops that remain to be computed. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is initially the cost that you defined for the task, then it decreases until it reaches 0</para>
<para>It works for sequential tasks, but the remaining amount of work is not a scalar value for parallel tasks. So you will get an exception if you call this function on parallel tasks. Just don&apos;t do it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="369" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="707" bodyend="717" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="369" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6bf0cd6b8656600fe7889903cb4d9635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_task_get_remaining_work_ratio</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_remaining_work_ratio</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns a value in ]0,1[ that represent the task remaining work to do: starts at 1 and goes to 0. Returns 0 if not started or finished. </para>
        </briefdescription>
        <detaileddescription>
<para>It works for either parallel or sequential tasks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="370" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="688" bodyend="698" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="370" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a9e54b02b752e7a0aee539d57ee2a5774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_bytes_amount</definition>
        <argsstring>(msg_task_t task, double bytes_amount)</argsstring>
        <name>MSG_task_set_bytes_amount</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bytes_amount</declname>
          <defname>data_size</defname>
        </param>
        <briefdescription>
<para>set the amount data attached with the given task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the transfer is ongoing (already started and not finished), it is not modified by this call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="371" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="734" bodyend="737" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="371" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2e1dba6c6c1a6eb7b05fcbb1f0acf8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_task_get_remaining_communication</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_remaining_communication</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the total amount received by the given task. </para>
        </briefdescription>
        <detaileddescription>
<para>If the communication does not exist it will return 0. So, if the communication has FINISHED or FAILED it returns zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="373" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="744" bodyend="748" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="373" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aba49fde27570984e226fe555e8819835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MSG_task_get_bytes_amount</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_bytes_amount</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Returns the size of the data attached to the given task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="374" column="9" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="751" bodyend="755" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="374" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a19687ebde0e9a07cb99fc73e7dfa7a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_receive_with_timeout</definition>
        <argsstring>(msg_task_t *task, const char *alias, double timeout)</argsstring>
        <name>MSG_task_receive_with_timeout</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receives a task from a mailbox with a given timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function with a timeout, the execution flow will be blocked until the task is received or the timeout is achieved. See MSG_task_irecv for receiving tasks asynchronously. You can provide a -1 timeout to obtain an infinite timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to receive the task from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum wait time for completion (if -1, this call is the same as MSG_task_receive)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully received, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE, or MSG_TIMEOUT otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="376" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="521" bodyend="524" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="376" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a710ee9d4ea587ab6ae66014913ac91e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_receive</definition>
        <argsstring>(msg_task_t *task, const char *alias)</argsstring>
        <name>MSG_task_receive</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Receives a task from a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function, the execution flow will be blocked until the task is received. See MSG_task_irecv for receiving tasks asynchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to receive the task from</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully received, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="378" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="482" bodyend="485" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="378" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a4a29ded2ab96b5632e2f70dfd684783d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_receive_with_timeout_bounded</definition>
        <argsstring>(msg_task_t *task, const char *alias, double timeout, double rate)</argsstring>
        <name>MSG_task_receive_with_timeout_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Receives a task from a mailbox with a given timeout and at a given rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to receive the task from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum wait time for completion (if -1, this call is the same as MSG_task_receive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>limit the reception to rate bandwidth (byte/sec)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The rate parameter can be used to send a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_receive() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><simplesect kind="return"><para>Returns MSG_OK if the task was successfully received, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE, or MSG_TIMEOUT otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="381" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="543" bodyend="582" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="381" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ad147ccce869d2be6888e123063430dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_receive_bounded</definition>
        <argsstring>(msg_task_t *task, const char *alias, double rate)</argsstring>
        <name>MSG_task_receive_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Receives a task from a mailbox at a given rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to receive the task from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>limit the reception to rate bandwidth (byte/sec)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The rate parameter can be used to receive a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_receive() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><simplesect kind="return"><para>Returns MSG_OK if the task was successfully received, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="383" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="501" bodyend="504" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="383" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa280111a523d70bb36061e6e52ca1b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
        <definition>msg_comm_t MSG_task_isend</definition>
        <argsstring>(msg_task_t task, const char *alias)</argsstring>
        <name>MSG_task_isend</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Sends a task on a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non blocking function: use MSG_comm_wait() or MSG_comm_test() to end the communication.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to send on another location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to sent the task to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the msg_comm_t communication created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="386" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="321" bodyend="324" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="386" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1afb8d945da3bf7c7e54d8db238d5f5508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
        <definition>msg_comm_t MSG_task_isend_bounded</definition>
        <argsstring>(msg_task_t task, const char *alias, double maxrate)</argsstring>
        <name>MSG_task_isend_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxrate</declname>
        </param>
        <briefdescription>
<para>Sends a task on a mailbox with a maximum rate. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non blocking function: use MSG_comm_wait() or MSG_comm_test() to end the communication. The maxrate parameter allows the application to limit the bandwidth utilization of network links when sending the task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to send on another location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to sent the task to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxrate</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum communication rate for sending this task (byte/sec). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the msg_comm_t communication created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="387" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="337" bodyend="341" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="387" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7e292abd2fac532430ecb51a170a004a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_dsend</definition>
        <argsstring>(msg_task_t task, const char *alias, void_f_pvoid_t cleanup)</argsstring>
        <name>MSG_task_dsend</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>void_f_pvoid_t</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
<para>Sends a task on a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non blocking detached send function. Think of it as a best effort send. Keep in mind that the third parameter is only called if the communication fails. If the communication does work, it is responsibility of the receiver code to free anything related to the task, as usual. More details on this can be obtained on <ulink url="http://lists.gforge.inria.fr/pipermail/simgrid-user/2011-November/002649.html">this thread</ulink> in the SimGrid-user mailing list archive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to send on another location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to sent the task to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>a function to destroy the task if the communication fails, e.g. MSG_task_destroy (if nullptr, no function will be called) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="389" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="358" bodyend="361" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="389" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a361a85b101d3de18e8b7ed0a101d2af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_dsend_bounded</definition>
        <argsstring>(msg_task_t task, const char *alias, void_f_pvoid_t cleanup, double maxrate)</argsstring>
        <name>MSG_task_dsend_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>void_f_pvoid_t</type>
          <declname>cleanup</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxrate</declname>
        </param>
        <briefdescription>
<para>Sends a task on a mailbox with a maximal rate. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non blocking detached send function. Think of it as a best effort send. Keep in mind that the third parameter is only called if the communication fails. If the communication does work, it is responsibility of the receiver code to free anything related to the task, as usual. More details on this can be obtained on <ulink url="http://lists.gforge.inria.fr/pipermail/simgrid-user/2011-November/002649.html">this thread</ulink> in the SimGrid-user mailing list archive.</para>
<para>The rate parameter can be used to send a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_dsend() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a msg_task_t to send on another location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the mailbox to sent the task to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cleanup</parametername>
</parameternamelist>
<parameterdescription>
<para>a function to destroy the task if the communication fails, e.g. MSG_task_destroy (if nullptr, no function will be called) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxrate</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum communication rate for sending this task (byte/sec) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="390" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="383" bodyend="387" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="390" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2b926f935fa80e0bffe42d1b15669990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
        <definition>msg_comm_t MSG_task_irecv</definition>
        <argsstring>(msg_task_t *task, const char *alias)</argsstring>
        <name>MSG_task_irecv</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
          <defname>name</defname>
        </param>
        <briefdescription>
<para>Starts listening for receiving a task from an asynchronous communication. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non blocking function: use MSG_comm_wait() or MSG_comm_test() to end the communication.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. has to be valid until the end of the communication. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the mailbox to receive the task on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the msg_comm_t communication created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="391" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="593" bodyend="596" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="391" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2739c79f25a0363d83b7f214b06f77dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
        <definition>msg_comm_t MSG_task_irecv_bounded</definition>
        <argsstring>(msg_task_t *task, const char *alias, double rate)</argsstring>
        <name>MSG_task_irecv_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
          <defname>name</defname>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Starts listening for receiving a task from an asynchronous communication at a given rate. </para>
        </briefdescription>
        <detaileddescription>
<para>The rate parameter can be used to receive a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_irecv() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory location for storing a msg_task_t. has to be valid until the end of the communication. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the mailbox to receive the task on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>limit the bandwidth to the given rate (byte/sec) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the msg_comm_t communication created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="392" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="611" bodyend="628" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="392" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1afd22dad001b95804f5e93aa146c84fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_comm_test</definition>
        <argsstring>(msg_comm_t comm)</argsstring>
        <name>MSG_comm_test</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
<para>Checks whether a communication is done, and if yes, finalizes it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communication to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;true&apos; if the communication is finished (but it may have failed, use MSG_comm_get_status() to know its status) or &apos;false&apos; if the communication is not finished yet If the status is &apos;false&apos;, don&apos;t forget to use MSG_process_sleep() after the test. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="393" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="74" bodyend="77" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="393" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aafaee80367658116437f9b43f00f9005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_comm_testany</definition>
        <argsstring>(const_xbt_dynar_t comms)</argsstring>
        <name>MSG_comm_testany</name>
        <param>
          <type>const_xbt_dynar_t</type>
          <declname>comms</declname>
        </param>
        <briefdescription>
<para>This function checks if a communication is finished. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comms</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of communications </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the position of the finished communication if any (but it may have failed, use MSG_comm_get_status() to know its status), or -1 if none is finished </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="394" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="85" bodyend="124" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="394" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a12e546615e508872ca59b81fd586f431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_comm_destroy</definition>
        <argsstring>(const_msg_comm_t comm)</argsstring>
        <name>MSG_comm_destroy</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">const_msg_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
<para>Destroys the provided communication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="395" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="127" bodyend="130" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="395" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2ae956f1e7a1014652d85b5f8db42aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_comm_wait</definition>
        <argsstring>(msg_comm_t comm, double timeout)</argsstring>
        <name>MSG_comm_wait</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for the completion of a communication. </para>
        </briefdescription>
        <detaileddescription>
<para>It takes two parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communication to wait. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait until the communication terminates or the timeout occurs. You can provide a -1 timeout to obtain an infinite timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>msg_error_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="396" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="140" bodyend="143" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="396" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a01ce9097c976b96664e6785f6ab5d4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_comm_waitall</definition>
        <argsstring>(msg_comm_t *comm, int nb_elem, double timeout)</argsstring>
        <name>MSG_comm_waitall</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">msg_comm_t</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb_elem</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>This function is called by a sender and permits waiting for each communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of communication </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_elem</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the comm vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>for each call of MSG_comm_wait </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="397" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="151" bodyend="155" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="397" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a73c220aa95cded08fbfdc86bc9363d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_comm_waitany</definition>
        <argsstring>(const_xbt_dynar_t comms)</argsstring>
        <name>MSG_comm_waitany</name>
        <param>
          <type>const_xbt_dynar_t</type>
          <declname>comms</declname>
        </param>
        <briefdescription>
<para>This function waits for the first communication finished in a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comms</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of communications </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the position of the first finished communication (but it may have failed, use MSG_comm_get_status() to know its status) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="398" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="162" bodyend="201" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="398" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1addb6587539bbb0d575e26180c9f779ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
        <definition>msg_task_t MSG_comm_get_task</definition>
        <argsstring>(const_msg_comm_t comm)</argsstring>
        <name>MSG_comm_get_task</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">const_msg_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
<para>Get a task (msg_task_t) from a communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communication where to get the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the task from the communication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="399" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="218" bodyend="223" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="399" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a21906fef43ad47c151c45d9d1be078c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_comm_get_status</definition>
        <argsstring>(const_msg_comm_t comm)</argsstring>
        <name>MSG_comm_get_status</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_comm" kindref="compound">const_msg_comm_t</ref></type>
          <declname>comm</declname>
        </param>
        <briefdescription>
<para>Returns the error (if any) that occurred during a finished communication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>a finished communication </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the status of the communication, or MSG_OK if no error occurred during the communication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="400" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_comm.cpp" bodystart="208" bodyend="211" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="400" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a297e41ae363db652f2075d7e9d164bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_task_listen</definition>
        <argsstring>(const char *alias)</argsstring>
        <name>MSG_task_listen</name>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Check if there is a communication going on in a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the mailbox to be considered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if there is a communication, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="408" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="44" bodyend="47" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="408" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1ae1fb84e33c47ad59862188845ececdf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_send_with_timeout</definition>
        <argsstring>(msg_task_t task, const char *alias, double timeout)</argsstring>
        <name>MSG_task_send_with_timeout</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Sends a task to a mailbox with a timeout. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function, the execution flow will be blocked until the task is sent or the timeout is achieved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the mailbox name to where the task is sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum wait time for completion (if -1, this call is the same as MSG_task_send)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully sent, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE, or MSG_TIMEOUT otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="409" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="441" bodyend="444" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="409" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a67d9306a7940e2b32a57d4c4d2ce8523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_send_with_timeout_bounded</definition>
        <argsstring>(msg_task_t task, const char *alias, double timeout, double maxrate)</argsstring>
        <name>MSG_task_send_with_timeout_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxrate</declname>
        </param>
        <briefdescription>
<para>Sends a task to a mailbox with a timeout and with a maximum rate. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function, the execution flow will be blocked until the task is sent or the timeout is achieved.</para>
<para>The maxrate parameter can be used to send a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_send_with_timeout() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the mailbox name to where the task is sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum wait time for completion (if -1, this call is the same as MSG_task_send) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxrate</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum communication rate for sending this task (byte/sec)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully sent, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE, or MSG_TIMEOUT otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="410" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="463" bodyend="467" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="410" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a33c924177135850888f25378b8e0b3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_send</definition>
        <argsstring>(msg_task_t task, const char *alias)</argsstring>
        <name>MSG_task_send</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Sends a task to a mailbox. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function, the execution flow will be blocked until the task is sent (and received on the other side if MSG_task_receive is used). See MSG_task_isend for sending tasks asynchronously.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the mailbox name to where the task is sent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully sent, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="412" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="401" bodyend="405" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="412" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a53b8db292b2933c73708e8c50339a90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>msg_error_t</type>
        <definition>msg_error_t MSG_task_send_bounded</definition>
        <argsstring>(msg_task_t task, const char *alias, double rate)</argsstring>
        <name>MSG_task_send_bounded</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rate</declname>
          <defname>maxrate</defname>
        </param>
        <briefdescription>
<para>Sends a task to a mailbox with a maximum rate. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a blocking function, the execution flow will be blocked until the task is sent. The maxrate parameter allows the application to limit the bandwidth utilization of network links when sending the task.</para>
<para>The maxrate parameter can be used to send a task with a limited bandwidth (smaller than the physical available value). Use MSG_task_send() if you don&apos;t limit the rate (or pass -1 as a rate value do disable this feature).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the mailbox name to where the task is sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxrate</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum communication rate for sending this task (byte/sec)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns MSG_OK if the task was successfully sent, MSG_HOST_FAILURE, or MSG_TRANSFER_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="413" column="14" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="423" bodyend="427" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="413" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a7646951835a1ac861b6a35b41741a268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_task_listen_from</definition>
        <argsstring>(const char *alias)</argsstring>
        <name>MSG_task_listen_from</name>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
<para>Look if there is a communication on a mailbox and return the PID of the sender process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the mailbox to be considered</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the PID of sender process (or -1 if there is no communication in the mailbox) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="414" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="638" bodyend="647" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="414" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aff6a660d1f3a37ff7ee3daee0e3ae3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_task_set_category</definition>
        <argsstring>(msg_task_t task, const char *category)</argsstring>
        <name>MSG_task_set_category</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <briefdescription>
<para>Sets the tracing category of a task. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should be called after the creation of a MSG task, to define the category of that task. The first parameter task must contain a task that was =created with the function MSG_task_create(). The second parameter category must contain a category that was previously declared with the function TRACE_category (or with TRACE_category_with_color).</para>
<para><verbatim>embed:rst:leading-asterisk
* See :ref:`outcomes_vizu` for details on how to trace the (categorized) resource utilization.
* </verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task that is going to be categorized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the category to be associated to the task</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>MSG_task_get_category, TRACE_category, TRACE_category_with_color </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="415" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="795" bodyend="809" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="415" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1acdf6885dfe9aba73cde9741bf77089c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* MSG_task_get_category</definition>
        <argsstring>(const_msg_task_t task)</argsstring>
        <name>MSG_task_get_category</name>
        <param>
          <type><ref refid="classsimgrid_1_1msg_1_1_task" kindref="compound">const_msg_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the current tracing category of a task. (. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>MSG_task_set_category) </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>the task to be considered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the name of the tracing category of the given task, &quot;&quot; otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="416" column="13" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_task.cpp" bodystart="816" bodyend="819" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="416" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6f960676ac24fb9c64da2bfcc6f24da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_mailbox_set_async</definition>
        <argsstring>(const char *alias)</argsstring>
        <name>MSG_mailbox_set_async</name>
        <param>
          <type>const char *</type>
          <declname>alias</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="427" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="40" bodyend="43" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="427" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1aa540fb0fe72d3bf3b4183ba3c6e07faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
        <definition>msg_sem_t MSG_sem_init</definition>
        <argsstring>(int initial_value)</argsstring>
        <name>MSG_sem_init</name>
        <param>
          <type>int</type>
          <declname>initial_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="431" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="465" bodyend="468" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="431" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a6baf039cbe49f8d83b8d5423f463f4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_sem_acquire</definition>
        <argsstring>(msg_sem_t sem)</argsstring>
        <name>MSG_sem_acquire</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="432" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="469" bodyend="472" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="432" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1af03646b860fe0521ddc26c00655f4fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_sem_acquire_timeout</definition>
        <argsstring>(msg_sem_t sem, double timeout)</argsstring>
        <name>MSG_sem_acquire_timeout</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="433" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="473" bodyend="476" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="433" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a47ed8c02cacfe486d3fa7d29beb56af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_sem_release</definition>
        <argsstring>(msg_sem_t sem)</argsstring>
        <name>MSG_sem_release</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="434" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="477" bodyend="480" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="434" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a681e2b05787cb388551a670ff6018ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_sem_get_capacity</definition>
        <argsstring>(msg_sem_t sem)</argsstring>
        <name>MSG_sem_get_capacity</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="435" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="481" bodyend="484" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="435" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a32d5cb57099925cfebb8434ef247d2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_sem_destroy</definition>
        <argsstring>(const_sg_sem_t sem)</argsstring>
        <name>MSG_sem_destroy</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">const_sg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="436" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="485" bodyend="488" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="436" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a46b0858501af3424a570f8d786320520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_sem_would_block</definition>
        <argsstring>(msg_sem_t sem)</argsstring>
        <name>MSG_sem_would_block</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_semaphore" kindref="compound">msg_sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="437" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="489" bodyend="492" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="437" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a1ed4b3d824788966d7a2a813bcd4f4a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsimgrid_1_1s4u_1_1_barrier" kindref="compound">msg_bar_t</ref></type>
        <definition>msg_bar_t MSG_barrier_init</definition>
        <argsstring>(unsigned int count)</argsstring>
        <name>MSG_barrier_init</name>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Initializes a barrier, with count elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="442" column="12" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="450" bodyend="453" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="442" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a46766cc708036019af5bdb96d2966e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MSG_barrier_destroy</definition>
        <argsstring>(const_sg_bar_t bar)</argsstring>
        <name>MSG_barrier_destroy</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_barrier" kindref="compound">const_sg_bar_t</ref></type>
          <declname>bar</declname>
        </param>
        <briefdescription>
<para>Destroys barrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="444" column="7" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="455" bodyend="458" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="444" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="msg_8h_1a2bd13056a61d79b8910fc12fe3ba6c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MSG_barrier_wait</definition>
        <argsstring>(msg_bar_t bar)</argsstring>
        <name>MSG_barrier_wait</name>
        <param>
          <type><ref refid="classsimgrid_1_1s4u_1_1_barrier" kindref="compound">msg_bar_t</ref></type>
          <declname>bar</declname>
        </param>
        <briefdescription>
<para>Performs a barrier already initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" line="446" column="6" bodyfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/src/msg/msg_legacy.cpp" bodystart="460" bodyend="463" declfile="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h" declline="446" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/bytedance/codes/schedule_simulate/simgrid-v3.25/include/simgrid/msg.h"/>
  </compounddef>
</doxygen>
